{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gapx( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction gapx( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} input array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapx( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns {...}\n*/\nfunction gapx( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\tset = x.accessors[ 1 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha + get( xbuf, ix ) );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction gapx( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each element in a strided array.\n*\n* @module @stdlib/blas-ext-base-gapx\n*\n* @example\n* import gapx from '@stdlib/blas-ext-base-gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*\n* @example\n* import gapx from '@stdlib/blas-ext-base-gapx';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["M","gapx","N","alpha","x","strideX","offsetX","ix","m","o","i","arraylike2object","accessorProtocol","xbuf","get","set","data","accessors","ndarray","stride2offset","setReadOnly","main"],"mappings":";;mUA4BA,IAAIA,EAAI,EAqBR,SAASC,EAAMC,EAAGC,EAAOC,EAAGC,EAASC,GACpC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,GAAe,IAAVC,EACd,OAAOC,EAGR,IADAK,EAAIE,EAAkBP,IACfQ,iBACN,OChBF,SAAeV,EAAGC,EAAOC,EAAGC,EAASC,GACpC,IAAIO,EACAC,EACAC,EACAR,EACAG,EAUJ,IAPAG,EAAOT,EAAEY,KAGTF,EAAMV,EAAEa,UAAW,GACnBF,EAAMX,EAAEa,UAAW,GAEnBV,EAAKD,EACCI,EAAI,EAAGA,EAAIR,EAAGQ,IACnBK,EAAKF,EAAMN,EAAIJ,EAAQW,EAAKD,EAAMN,IAClCA,GAAMF,EAEP,OAAOD,CACR,CDJSa,CAAWf,EAAGC,EAAOM,EAAGJ,EAASC,GAKzC,GAHAC,EAAKD,EAGY,IAAZD,EAAgB,CAIpB,IAHAG,EAAIN,EAAIF,GAGC,EACR,IAAMU,EAAI,EAAGA,EAAIF,EAAGE,IACnBN,EAAGG,IAAQJ,EACXI,GAAMF,EAGR,GAAKH,EAAIF,EACR,OAAOI,EAER,IAAMM,EAAIF,EAAGE,EAAIR,EAAGQ,GAAKV,EACxBI,EAAGG,IAAQJ,EACXC,EAAGG,EAAG,IAAOJ,EACbC,EAAGG,EAAG,IAAOJ,EACbC,EAAGG,EAAG,IAAOJ,EACbC,EAAGG,EAAG,IAAOJ,EACbI,GAAMP,EAEP,OAAOI,CACP,CACD,IAAMM,EAAI,EAAGA,EAAIR,EAAGQ,IACnBN,EAAGG,IAAQJ,EACXI,GAAMF,EAEP,OAAOD,CACR,CElDA,SAASH,EAAMC,EAAGC,EAAOC,EAAGC,GAC3B,OAAOa,EAAShB,EAAGC,EAAOC,EAAGC,EAASc,EAAejB,EAAGG,GACzD,CCMAe,EAAAC,EAAA,UAAAH"}